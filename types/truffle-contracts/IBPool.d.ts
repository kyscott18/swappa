/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IBPoolContract extends Truffle.Contract<IBPoolInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBPoolInstance>;
}

type AllEvents = never;

export interface IBPoolInstance extends Truffle.ContractInstance {
  swapExactAmountIn: {
    (
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactAmountOut: {
    (
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: number | BN | string,
      arg2: string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calcInGivenOut(
    arg0: number | BN | string,
    arg1: number | BN | string,
    arg2: number | BN | string,
    arg3: number | BN | string,
    arg4: number | BN | string,
    arg5: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calcOutGivenIn(
    arg0: number | BN | string,
    arg1: number | BN | string,
    arg2: number | BN | string,
    arg3: number | BN | string,
    arg4: number | BN | string,
    arg5: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDenormalizedWeight(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getBalance(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getSwapFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    swapExactAmountIn: {
      (
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, BN]>;
      sendTransaction(
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapExactAmountOut: {
      (
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, BN]>;
      sendTransaction(
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: number | BN | string,
        arg2: string,
        arg3: number | BN | string,
        arg4: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    calcInGivenOut(
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calcOutGivenIn(
      arg0: number | BN | string,
      arg1: number | BN | string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: number | BN | string,
      arg5: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDenormalizedWeight(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getBalance(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSwapFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
