/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILendingPoolV2Contract
  extends Truffle.Contract<ILendingPoolV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILendingPoolV2Instance>;
}

type AllEvents = never;

export interface ILendingPoolV2Instance extends Truffle.ContractInstance {
  withdraw: {
    (
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      amount: number | BN | string,
      onBehalfOf: string,
      referralCode: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getReservesList(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getReserveData(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    configuration: { data: BN };
    liquidityIndex: BN;
    variableBorrowIndex: BN;
    currentLiquidityRate: BN;
    currentVariableBorrowRate: BN;
    currentStableBorrowRate: BN;
    lastUpdateTimestamp: BN;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: BN;
  }>;

  methods: {
    withdraw: {
      (
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deposit: {
      (
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        amount: number | BN | string,
        onBehalfOf: string,
        referralCode: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getReservesList(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getReserveData(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      configuration: { data: BN };
      liquidityIndex: BN;
      variableBorrowIndex: BN;
      currentLiquidityRate: BN;
      currentVariableBorrowRate: BN;
      currentStableBorrowRate: BN;
      lastUpdateTimestamp: BN;
      aTokenAddress: string;
      stableDebtTokenAddress: string;
      variableDebtTokenAddress: string;
      interestRateStrategyAddress: string;
      id: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
