/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IExchangeContract extends Truffle.Contract<IExchangeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IExchangeInstance>;
}

type AllEvents = never;

export interface IExchangeInstance extends Truffle.ContractInstance {
  stable(txDetails?: Truffle.TransactionDetails): Promise<string>;

  sell: {
    (
      sellAmount: number | BN | string,
      minBuyAmount: number | BN | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sellAmount: number | BN | string,
      minBuyAmount: number | BN | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      sellAmount: number | BN | string,
      minBuyAmount: number | BN | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sellAmount: number | BN | string,
      minBuyAmount: number | BN | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBuyTokenAmount(
    sellAmount: number | BN | string,
    sellGold: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    stable(txDetails?: Truffle.TransactionDetails): Promise<string>;

    sell: {
      (
        sellAmount: number | BN | string,
        minBuyAmount: number | BN | string,
        sellGold: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sellAmount: number | BN | string,
        minBuyAmount: number | BN | string,
        sellGold: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        sellAmount: number | BN | string,
        minBuyAmount: number | BN | string,
        sellGold: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sellAmount: number | BN | string,
        minBuyAmount: number | BN | string,
        sellGold: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBuyTokenAmount(
      sellAmount: number | BN | string,
      sellGold: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
