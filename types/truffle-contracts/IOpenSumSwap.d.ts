/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IOpenSumSwapContract
  extends Truffle.Contract<IOpenSumSwapInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IOpenSumSwapInstance>;
}

type AllEvents = never;

export interface IOpenSumSwapInstance extends Truffle.ContractInstance {
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  getToken(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getBalances(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

  swap: {
    (
      tokenFrom: string,
      tokenTo: string,
      amountIn: number | BN | string,
      minAmountOut: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenFrom: string,
      tokenTo: string,
      amountIn: number | BN | string,
      minAmountOut: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokenFrom: string,
      tokenTo: string,
      amountIn: number | BN | string,
      minAmountOut: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenFrom: string,
      tokenTo: string,
      amountIn: number | BN | string,
      minAmountOut: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    getToken(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getBalances(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

    swap: {
      (
        tokenFrom: string,
        tokenTo: string,
        amountIn: number | BN | string,
        minAmountOut: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenFrom: string,
        tokenTo: string,
        amountIn: number | BN | string,
        minAmountOut: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tokenFrom: string,
        tokenTo: string,
        amountIn: number | BN | string,
        minAmountOut: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenFrom: string,
        tokenTo: string,
        amountIn: number | BN | string,
        minAmountOut: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
