/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IBRegistryContract
  extends Truffle.Contract<IBRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBRegistryInstance>;
}

export interface IndicesUpdated {
  name: "IndicesUpdated";
  args: {
    token1: string;
    token2: string;
    oldIndices: string;
    newIndices: string;
    0: string;
    1: string;
    2: string;
    3: string;
  };
}

export interface PoolTokenPairAdded {
  name: "PoolTokenPairAdded";
  args: {
    pool: string;
    token1: string;
    token2: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents = IndicesUpdated | PoolTokenPairAdded;

export interface IBRegistryInstance extends Truffle.ContractInstance {
  getPairInfo(
    pool: string,
    fromToken: string,
    destToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  getPoolsWithLimit(
    fromToken: string,
    destToken: string,
    offset: number | BN | string,
    limit: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getBestPools(
    fromToken: string,
    destToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getBestPoolsWithLimit(
    fromToken: string,
    destToken: string,
    limit: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  addPoolPair: {
    (
      pool: string,
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      pool: string,
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      pool: string,
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pool: string,
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addPools: {
    (
      pools: string[],
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      pools: string[],
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;
    sendTransaction(
      pools: string[],
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pools: string[],
      token1: string,
      token2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sortPools: {
    (
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  sortPoolsWithPurge: {
    (
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokens: string[],
      lengthLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: number | BN | string,
      limit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getBestPools(
      fromToken: string,
      destToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    addPoolPair: {
      (
        pool: string,
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        pool: string,
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        pool: string,
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pool: string,
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addPools: {
      (
        pools: string[],
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        pools: string[],
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN[]>;
      sendTransaction(
        pools: string[],
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pools: string[],
        token1: string,
        token2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sortPools: {
      (
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    sortPoolsWithPurge: {
      (
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokens: string[],
        lengthLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
