/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SwappaRouterV1Contract
  extends Truffle.Contract<SwappaRouterV1Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<SwappaRouterV1Instance>;
}

export interface Swap {
  name: "Swap";
  args: {
    sender: string;
    to: string;
    input: string;
    output: string;
    inputAmount: BN;
    outputAmount: BN;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
  };
}

type AllEvents = Swap;

export interface SwappaRouterV1Instance extends Truffle.ContractInstance {
  getOutputAmount(
    path: string[],
    pairs: string[],
    extras: string[],
    inputAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  swapExactInputForOutput: {
    (
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapExactInputForOutputWithPrecheck: {
    (
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      minOutputAmount: number | BN | string,
      to: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getOutputAmount(
      path: string[],
      pairs: string[],
      extras: string[],
      inputAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    swapExactInputForOutput: {
      (
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapExactInputForOutputWithPrecheck: {
      (
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        path: string[],
        pairs: string[],
        extras: string[],
        inputAmount: number | BN | string,
        minOutputAmount: number | BN | string,
        to: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
