/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  AbiItem,
  Callback,
  CeloTxObject,
  Contract,
  EventLog,
} from "@celo/connect";
import { EventEmitter } from "events";
import Web3 from "web3";
import { EventOptions } from "./types";

export interface IExchange extends Contract {
  clone(): IExchange;
  methods: {
    stable(): CeloTxObject<string>;

    sell(
      sellAmount: number | string,
      minBuyAmount: number | string,
      sellGold: boolean
    ): CeloTxObject<string>;

    getBuyTokenAmount(
      sellAmount: number | string,
      sellGold: boolean
    ): CeloTxObject<string>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
export const ABI: AbiItem[] = [
  {
    inputs: [],
    name: "stable",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "sellAmount", type: "uint256" },
      { internalType: "uint256", name: "minBuyAmount", type: "uint256" },
      { internalType: "bool", name: "sellGold", type: "bool" },
    ],
    name: "sell",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "sellAmount", type: "uint256" },
      { internalType: "bool", name: "sellGold", type: "bool" },
    ],
    name: "getBuyTokenAmount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
];

export function newIExchange(web3: Web3, address: string): IExchange {
  return new web3.eth.Contract(ABI, address) as any;
}
