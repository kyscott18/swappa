/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  AbiItem,
  Callback,
  CeloTxObject,
  Contract,
  EventLog,
} from "@celo/connect";
import { EventEmitter } from "events";
import Web3 from "web3";
import { EventOptions } from "./types";

export interface PairSymmetricSwap extends Contract {
  clone(): PairSymmetricSwap;
  methods: {
    swap(
      input: string,
      output: string,
      to: string,
      data: string | number[]
    ): CeloTxObject<void>;

    getOutputAmount(
      input: string,
      output: string,
      amountIn: number | string,
      data: string | number[]
    ): CeloTxObject<string>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
export const ABI: AbiItem[] = [
  {
    inputs: [
      { internalType: "address", name: "input", type: "address" },
      { internalType: "address", name: "output", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "input", type: "address" },
      { internalType: "address", name: "output", type: "address" },
      { internalType: "uint256", name: "amountIn", type: "uint256" },
      { internalType: "bytes", name: "data", type: "bytes" },
    ],
    name: "getOutputAmount",
    outputs: [{ internalType: "uint256", name: "amountOut", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
];

export function newPairSymmetricSwap(
  web3: Web3,
  address: string
): PairSymmetricSwap {
  return new web3.eth.Contract(ABI, address) as any;
}
