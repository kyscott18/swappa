"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.newIbRegistry = exports.ABI = void 0;
exports.ABI = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "token1",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "token2",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "oldIndices",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "newIndices",
                type: "bytes32",
            },
        ],
        name: "IndicesUpdated",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "address", name: "pool", type: "address" },
            {
                indexed: true,
                internalType: "address",
                name: "token1",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "token2",
                type: "address",
            },
        ],
        name: "PoolTokenPairAdded",
        type: "event",
    },
    {
        inputs: [
            { internalType: "address", name: "pool", type: "address" },
            { internalType: "address", name: "fromToken", type: "address" },
            { internalType: "address", name: "destToken", type: "address" },
        ],
        name: "getPairInfo",
        outputs: [
            { internalType: "uint256", name: "weight1", type: "uint256" },
            { internalType: "uint256", name: "weight2", type: "uint256" },
            { internalType: "uint256", name: "swapFee", type: "uint256" },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "fromToken", type: "address" },
            { internalType: "address", name: "destToken", type: "address" },
            { internalType: "uint256", name: "offset", type: "uint256" },
            { internalType: "uint256", name: "limit", type: "uint256" },
        ],
        name: "getPoolsWithLimit",
        outputs: [{ internalType: "address[]", name: "result", type: "address[]" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "fromToken", type: "address" },
            { internalType: "address", name: "destToken", type: "address" },
        ],
        name: "getBestPools",
        outputs: [{ internalType: "address[]", name: "pools", type: "address[]" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "fromToken", type: "address" },
            { internalType: "address", name: "destToken", type: "address" },
            { internalType: "uint256", name: "limit", type: "uint256" },
        ],
        name: "getBestPoolsWithLimit",
        outputs: [{ internalType: "address[]", name: "pools", type: "address[]" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "pool", type: "address" },
            { internalType: "address", name: "token1", type: "address" },
            { internalType: "address", name: "token2", type: "address" },
        ],
        name: "addPoolPair",
        outputs: [{ internalType: "uint256", name: "listed", type: "uint256" }],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address[]", name: "pools", type: "address[]" },
            { internalType: "address", name: "token1", type: "address" },
            { internalType: "address", name: "token2", type: "address" },
        ],
        name: "addPools",
        outputs: [{ internalType: "uint256[]", name: "listed", type: "uint256[]" }],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address[]", name: "tokens", type: "address[]" },
            { internalType: "uint256", name: "lengthLimit", type: "uint256" },
        ],
        name: "sortPools",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address[]", name: "tokens", type: "address[]" },
            { internalType: "uint256", name: "lengthLimit", type: "uint256" },
        ],
        name: "sortPoolsWithPurge",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
function newIbRegistry(web3, address) {
    return new web3.eth.Contract(exports.ABI, address);
}
exports.newIbRegistry = newIbRegistry;
//# sourceMappingURL=IBRegistry.js.map